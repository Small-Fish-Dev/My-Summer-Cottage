@using Sandbox;
@using Sauna.UI;
@using Sandbox.UI;

@namespace Sauna
@inherits PanelComponent
@attribute [StyleSheet]

<root>
	@* Header *@
	<div class="header-content">
		@if( CreatorComponent.Current != CreatorStage.Confirmation )
		{
			<div class="title">Character Creation</div>
			<div class="stage">Stage @stageInteger - @(CreatorComponent.Current.ToString().Replace( '_', ' ' ))</div>

			<div class="stage-counter">
				@for ( int i = 0; i < 3; i++ )
				{
					<div class="box">
						@if ( stageInteger == i + 1 )
						{
							<div class="fill" />
						}
					</div>

					if ( i < 2 )
					{
						<div class="spacer" />
					}
				}
			</div>
		}
		else
		{
			<div class="title">Confirm this Character?</div>
		}
	</div>

	@if( stageInteger > 1)
	{
		<SideButton 
			Title="Go back" 
			Subtitle="to Stage @(stageInteger  - 1)"
			OnClick=@CreatorComponent.PreviousStage
			style="position:absolute; left: 0px; top: 40px;"
		/>
	}

	@* Other related UI element. *@
	@switch( CreatorComponent.Current )
	{
		case CreatorStage.Identification:
			<SideButton 
				Title="Continue" 
				Subtitle="Use the enter key to swap between the fields."
				ImagePath="ui/hud/confirm.png"
				OnClick=@CreatorComponent.NextStage
				IsDisabled=@disabled
				IsInverted=@true
				style="position:absolute; right: 0px; bottom: 50px;"
			/>

			break;

		case CreatorStage.Appearance:
			<TabletPanel />

			break;

		case CreatorStage.Dressing_up:
			<ClothingPanel />

			<div class="note">
				<label>Choose the clothing you want to begin your journey with.</label>
				<label>Scroll to view all the different options.</label>
			</div>

			<SideButton 
				Title="Confirm" 
				Subtitle="Finish selecting clothes."
				ImagePath="ui/hud/confirm.png"
				OnClick=@CreatorComponent.NextStage
				IsDisabled=@false
				IsInverted=@true
				style="position:absolute; right: 0px; bottom: 50px;"
			/>
			break;

		case CreatorStage.Confirmation:
			<div class="note">
				<label>You can always choose your clothes during the gameplay.</label>
				<label>Do note that your full name and appearance cannot be changed, so choose wisely...</label>
			</div>

			<SideButton 
				Title="Confirm" 
				Subtitle="Begin your cottage story."
				ImagePath="ui/hud/confirm.png"
				OnClick=@Save
				IsDisabled=@false
				IsInverted=@true
				style="position:absolute; right: 0px; bottom: 50px;"
			/>

			break;
	}
</root>

@code {
	private SkinnedModelRenderer renderer;
	public SkinnedModelRenderer Renderer
	{
		get
		{
			if (renderer != null)
				return renderer;

			return renderer = CreatorComponent.All[CreatorStage.Appearance].GameObject
				.Components.Get<SkinnedModelRenderer>(FindMode.EverythingInDescendants);
		}
	}
	public SceneModel Model => Renderer.SceneModel;

	private int stageInteger => (int)CreatorComponent.Current + 1;

	private bool disabled => 
		string.IsNullOrEmpty( PassportPanel.Firstname ) 
		|| string.IsNullOrEmpty( PassportPanel.Lastname );

	private void Save() =>
		Player.WriteSave( 
			new() {
				Firstname = PassportPanel.Firstname.ToLower().ToTitleCase(),
				Lastname = PassportPanel.Lastname.ToLower().ToTitleCase(),
				Fatness = TabletPanel.Weight,
				Height = TabletPanel.Height,
				SkinColor = TabletPanel.SkinColor,
				Clothes = ClothingPanel.GetSelections()
					.Select( x => new ItemSave {
						Path = x.Value
					} )
					.ToArray()
			} 
		);

	private BodypartPanel[] panels;

	public static void PlayUISound( string path )
	{
		var sound = Sound.Play( path );
		sound.ListenLocal = true;
		sound.Volume = 0.5f;
	}

	protected override void OnTreeFirstBuilt()
	{
		base.OnTreeFirstBuilt();

		var slots = Enum.GetValues<EquipSlot>();
		panels = new BodypartPanel[slots.Length - 1];
		for ( int i = 0; i < slots.Length; i++ )
		{
			if ( slots[i] == EquipSlot.Hand )
				continue;

			var pnl = panels[i] = Panel.AddChild<BodypartPanel>();
			pnl.GradientLeft = i % 2 == 0;
			pnl.Slot = slots[i];
		}
	}

	private int GetBone( EquipSlot slot ) // i love le hardcoding values!
		=> slot switch
		{
			EquipSlot.Head => 7,
			EquipSlot.Face => 6,
			EquipSlot.Body => 4,
			EquipSlot.Legs => 20,
			EquipSlot.Feet => 22,
			_ => 0
		};

	private Vector3 GetOffset( EquipSlot slot )
		=> slot switch
		{
			EquipSlot.Head => new Vector3( 0, -5, 1 ),
			EquipSlot.Face => new Vector3( 0, 5, 4 ),
			EquipSlot.Body => new Vector3( 0, -12, 0 ),
			EquipSlot.Legs => new Vector3( 0, 15, 0 ),
			EquipSlot.Feet => new Vector3( 0, -16, -4 ),
			_ => 0
		};

	protected override void OnUpdate()
	{
		if ( panels == null )
			return;

		foreach ( var panel in panels )
		{
			var worldPosition = Model.GetBoneWorldTransform( GetBone( panel.Slot ) ).Position;
			var position = Scene.Camera.PointToScreenNormal( GetOffset( panel.Slot ) * Scene.Camera.Transform.Rotation.Inverse + worldPosition );

			panel.Style.Opacity = CreatorComponent.Current == CreatorStage.Appearance || CreatorComponent.Current == CreatorStage.Dressing_up 
				? 1 
				: 0;
			panel.Style.Left = Length.Fraction( position.x );
			panel.Style.Top = Length.Fraction( position.y );
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( stageInteger, disabled );
	}
}
