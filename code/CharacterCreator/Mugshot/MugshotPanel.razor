@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits PanelComponent
@attribute [StyleSheet]

<root>
	<label>@PassportPanel.Firstname</label>
	<label>@PassportPanel.Lastname</label>
	<label class="small">@(TabletPanel.DisplayedWeight) KG, @(TabletPanel.DisplayedHeight) CM</label>
</root>

@code {
    private const float ROTATE_DELAY = 3f;

    [Property] public SkinnedModelRenderer Model { get; set; }

    RealTimeSince lastRotated;
    int rotated;
    bool invert;

    private int getAnim( int direction ) => direction switch
    {
        1 => 1,
        -1 => 2,
        _ => 0
    };

    public void RotateGuy( int amount )
    {
        if ( Model.GetInt( "turn" ) != 0 )
            return;

        rotated += amount;
        Model.Set( "turn", getAnim( amount ) );
        lastRotated = 0f;
    }

    protected override void OnUpdate()
    {
        var inConfirm = CreatorComponent.Current == CreatorStage.Confirmation;
        if ( Model == null )
            return;

        if ( Input.Pressed( InputAction.LeftClick ) )
            RotateGuy( 1 );

        var targetRotation = Rotation.FromYaw( 90f + rotated * 90f );
        Model.Transform.Rotation = Rotation.Slerp( Model.Transform.Rotation, targetRotation, 4f * Time.Delta );

        var transform = Model?.GetAttachment( "mugshot_sign" ) ?? global::Transform.Zero;
        GameObject.Transform.World = transform;
        GameObject.Transform.Position += transform.Rotation.Forward * 0.5f;

        var mousePos = Mouse.Position;
        var headPos = Scene.Camera.PointToScreenPixels( Model.GetAttachment("eyes").Value.Position );
        var localPos = mousePos - headPos;


        Model.Set("lookat", new Vector3( 1000f, localPos.x, -localPos.y));
        Model.Set( "weight", TabletPanel.Weight );
		Model.Set( "mugshot", inConfirm );

		if ( !inConfirm )
		{
			if ( rotated != 0 && Model.GetInt( "turn" ) == 0 )
			{
				var direction = -Math.Sign( rotated );
				Model.Set( "turn", getAnim( direction ) );
				rotated = 0;
			}

			lastRotated = 0f;

			return;
		}

		// Rotate from side to side.
		if ( lastRotated > ROTATE_DELAY && Model.GetInt( "turn" ) == 0 )
		{
			if ( rotated % 4 == 0 ) invert = !invert;
			var direction = invert ? 1 : -1;
			RotateGuy( direction );
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( PassportPanel.Fullname );
	}
}
