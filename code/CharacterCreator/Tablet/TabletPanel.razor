@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits Panel
@attribute [StyleSheet]

<root>
	<label class="name dark">@PassportPanel.Fullname</label>

	<div class="weight">
		<div class="text">
			<label class="light">WEIGHT, KG</label>
			<label class="dark">@(DisplayedWeight) KG</label>
		</div>
		<slider 
			class="slider"
			minimum=@(60) maximum=@(125) default=@(DisplayedWeight) 
			@onvalueset=@(value => {
				DisplayedWeight = (int)value.Value;
				Weight = MathX.Remap( (float)DisplayedWeight, 60, 125, 0, 1 );
				CreatorOverlay.Model.Morphs.Set( "fat", Weight );
				CreatorOverlay.Model.Update( Time.Delta );
			})
		/>
	</div>

	<div class="skin-color">
		<div class="text">
			<label class="light">SKIN COLOR</label>
		</div>

		<div class="colors">
			@foreach ( var color in _skinColors )
			{
				<div 
					class="color @(SkinColor == color ? "selected" : "")"
					onclick=@(() => {
						SkinColor = color;
						CreatorOverlay.Renderer.Tint = SkinColor;
						ClothingPanel.UpdateSelection();
						CreatorOverlay.Penoid.Attributes.Set( "g_flColorTint", SkinColor );
						PlaySound( "light_click" );
					})
				>
					<div class="inner" style="background-color: @(color.Hex)" />
				</div>
			}
		</div>
	</div>

	<div class="height">
		<div class="text">
			<label class="light">HEIGHT, CM</label>
			<label class="dark">@(DisplayedHeight) CM</label>
		</div>
		<slider 
			class="slider"
			minimum=@(150) maximum=@(195) default=@(DisplayedHeight) 
			@onvalueset=@(value => {
				DisplayedHeight = (int)value.Value;
				Height = MathX.Remap( (float)DisplayedHeight, 150, 195, -90, 80 );
				CreatorOverlay.Model.SetAnimParameter( "height", Height );
				CreatorOverlay.Model.Update( Time.Delta );
			})
		/>
	</div>

	<div class="confirm" @onclick=@(() => {
		CreatorComponent.NextStage();
	})>
		CONFIRM
	</div>
</root>

@code {
	public const int DEFAULT_WEIGHT = 70;
	public const int DEFAULT_HEIGHT = 178;

	public static int DisplayedWeight = DEFAULT_WEIGHT;
	public static int DisplayedHeight = DEFAULT_HEIGHT;
	private static readonly Color[] _skinColors = new[]
	{
		Color.White,
		Color.Gray,
		Color.FromBytes( 189, 137, 102 ),
		Color.FromBytes( 87, 64, 40 ),
		Color.FromBytes( 37, 28, 27 )
	};

	public static float Weight { get; set; }
	public static float Height { get; set; }
	public static Color SkinColor { get; set; } = _skinColors.FirstOrDefault();

	protected override int BuildHash()
	{
		return HashCode.Combine( DisplayedWeight, DisplayedHeight, SkinColor );
	}
}
