@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits WorldPanel

@attribute [StyleSheet( "/Entities/Radio/RadioDisplay.scss" )]

<root style="background-color: darken(#5E7C34, @(Radio.CurrentSong != null ? 0.7 : 0.9));">
	@if( Radio.CurrentSong != null )
	{
		<label class="text background" style="color: rgba(0,0,0,0.09)">
			@BackgroundText
		</label>

		<label class="text foreground">
			@ActualText
		</label>

		<panel class="timeline">
			<panel class="inner" @ref=timeline />
		</panel>
	}
</root>

@code {
	public Radio Radio { get; private set; }

	private Panel timeline { get; set; }

	/// <summary> Time to wait after each character </summary>
	public const float ScrollWait = 0.5f;
	
	/// <summary> Time to wait after returning to start of text </summary>
	public const float ScrollPostWait = 1.2f;

	/// <summary> Max amount of characters on screen </summary>
	public const int MaxScreenCharacters = 10;

	private int textOffset;
	private TimeUntil timeUntilScroll = ScrollPostWait;
	
	public string VirtualText => Radio.CurrentSong == null ? null : $"{Radio.CurrentSong.Value.Producer} - {Radio.CurrentSong.Value.Name}";
	public string ActualText => new string((VirtualText ?? "")
		.Skip(textOffset)
		.Take(MaxScreenCharacters).ToArray())
		.Replace(" ", "!"); // '!' == All-off character for DSEG font
	public string BackgroundText => new('8', MaxScreenCharacters);
	
	public RadioDisplay( Radio radio )
	{
		Radio = radio;

		var size = new Vector2( 104f, 25f );
		Scale = 0.5f;
		PanelBounds = new( -size.x / 2f, -size.y / 2f, size.x, size.y );
	}

	[Event.Client.Frame]
	private void frame()
	{
		if ( Radio == null || !Radio.IsValid )
		{
			Delete( true );
			return;
		}

		var attachment = Radio.GetAttachment( "screen" );
		if ( attachment == null )
			return;

		var transform = attachment.Value;
		Position = transform.Position + transform.Rotation.Forward * 0.1f;
		Rotation = transform.Rotation;

		if (timeUntilScroll)
		{
			timeUntilScroll = ScrollWait;
			textOffset++;

			if (textOffset > VirtualText?.Length)
			{
				textOffset = 0;
				timeUntilScroll = ScrollPostWait;
			}
			
			StateHasChanged();
		}
		
		if ( Radio.CurrentSong != null && Radio.ElapsedTime != null && timeline?.Style != null )
			timeline.Style.Width = Length.Fraction( Radio.ElapsedTime.Value / Radio.CurrentSong.Value.Duration );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Radio?.CurrentSong?.Path );
	}
}