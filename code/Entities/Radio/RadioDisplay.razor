@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits WorldPanel

<style>
	RadioDisplay {
		position: absolute;
		width: 100%;
		height: 100%;
		flex-direction: column;

		.text {
			position: absolute;
			top: 8px;
			left: 4px;
			width: 100%;
			font-size: 24px;
			font-family: "DSEG14 Modern";
			max-height: 100%;

			.background {
				z-index: 0;
			}

			.foreground {
				z-index: 1;
				color: darken(#5E7C34, 0.95);
			}
		}

		.timeline {
			position: absolute;
			bottom: 2px;
			left: 6px;
			height: 10px;
			width: 192px;
			border: 1px black;

			.inner {
				position: absolute;
				top: 0px;
				left: 0px;
				height: 6px;
				max-width: 188px;
				background-color: black;
			}
		}
	}
</style>

<root style="background-color: darken(#5E7C34, @(Radio.CurrentSong != null ? 0.7 : 0.9));">
	@if( Radio.CurrentSong != null )
	{
		<label class="text background" style="color: rgba(0,0,0,0.1)">
			@BackgroundText
		</label>

		<label class="text foreground">
			@ActualText
		</label>

		<panel class="timeline">
			<panel class="inner" @ref=timeline />
		</panel>
	}
</root>

@code {
	public Radio Radio { get; private set; }

	/// <summary> Time to wait after each character </summary>
	public const float ScrollWait = 0.5f;
	
	/// <summary> Time to wait after returning to start of text </summary>
	public const float ScrollPostWait = 1.2f;

	/// <summary> Max amount of characters on screen </summary>
	public const int MaxScreenCharacters = 10;

	private Panel timeline;
	private int textOffset;
	private TimeUntil timeUntilScroll = ScrollPostWait;
	
	public string VirtualText => Radio.CurrentSong == null ? null : $"{Radio.CurrentSong.Value.Producer} - {Radio.CurrentSong.Value.Name}";
	public string ActualText => new string( (VirtualText ?? "")
		.Skip( textOffset )
		.Take( MaxScreenCharacters ).ToArray() )
		.Replace( " ", "!" ); // '!' == All-off character for DSEG font
	public string BackgroundText => new( '8', MaxScreenCharacters );
	
	public RadioDisplay( Radio radio )
	{
		Radio = radio;

		var size = new Vector2( 104f, 25f );
		Scale = 0.5f;
		PanelBounds = new( -size.x / 2f, -size.y / 2f, size.x, size.y );
	}

	[Event.Client.Frame]
	private void frame()
	{
		if ( Radio == null || !Radio.IsValid )
		{
			Delete( true );
			return;
		}

		var attachment = Radio.GetAttachment( "screen" );
		if ( attachment == null )
			return;

		var transform = attachment.Value;
		Position = transform.Position + transform.Rotation.Forward * 0.1f;
		Rotation = transform.Rotation;

		if ( timeUntilScroll )
		{
			timeUntilScroll = ScrollWait;
			textOffset++;

			if ( textOffset > VirtualText?.Length )
			{
				textOffset = 0;
				timeUntilScroll = ScrollPostWait;
			}
			
			StateHasChanged();
		}
		
		if ( Radio.CurrentSong != null && Radio.ElapsedTime != null && timeline?.Style != null )
			timeline.Style.Width = Length.Fraction( Radio.ElapsedTime.Value / Radio.CurrentSong.Value.Duration );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Radio?.CurrentSong?.Path );
	}
}