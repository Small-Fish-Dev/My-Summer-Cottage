@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits PanelComponent
@attribute [StyleSheet]

<root style="background-color: darken(#5E7C34, @(Radio.On ? 0.5 : 0.7));">
	@if ( Radio.On )
	{
		<label class="text background" style="color: rgba(0,0,0,0.1)">@BackgroundText</label>
		<label class="text foreground" @ref=displayLabel />

		<div class="visualizer-container" @ref=_visualizer />
	}
</root>

@code {
	[Property] public RadioComponent Radio { get; private set; }

	/// <summary> Time to wait after each character </summary>
	public const float ScrollWait = 0.5f;

	/// <summary> Time to wait after returning to start of text </summary>
	public const float ScrollPostWait = 1.2f;

	/// <summary> Max amount of characters on screen </summary>
	public const int MaxScreenCharacters = 12;

	private Panel _visualizer;
	private Panel[] _bars;

	private Label displayLabel;
	private int textOffset;
	private TimeUntil timeUntilScroll = ScrollPostWait;

	public string VirtualText => Radio.Title.RemoveDiacritics();
	public string ActualText => new string( (VirtualText ?? "")
		.Skip( textOffset )
		.Take( MaxScreenCharacters ).ToArray() )
		.Replace( " ", "!" ); // '!' == All-off character for DSEG font
	public string BackgroundText => new( '8', MaxScreenCharacters );

	private void GenerateBars()
	{
		_bars = new Panel[10];
		for ( int i = 0; i < _bars.Length; i++ )
			_bars[i] = _visualizer.AddChild<Panel>( "bar" );
	}

	protected override void OnUpdate()
	{
		if ( timeUntilScroll && displayLabel != null )
		{
			timeUntilScroll = ScrollWait;
			textOffset++;

			if ( textOffset > VirtualText?.Length )
			{
				textOffset = 0;
				timeUntilScroll = ScrollPostWait;
			}

			displayLabel.Text = ActualText;
		}

		if ( Radio.IsValid() && Radio.On ) // todo: check if player is even looking at radio lol, no need to do this expensive shit
		{
			var spectrum = Radio.GetSpectrum();
			if ( _bars == null )
			{
				if ( _visualizer != null )
					GenerateBars();

				return;
			}

			if ( spectrum.Length <= 0 )
				return;

			for ( int i = 0; i < _bars.Length; i++ )
			{
				var value = (spectrum[i] + spectrum[i + 1] + spectrum[i + 2] + spectrum[i + 3]) / 4f;
				_bars[i].Style.Height = (value * 3).Clamp( 0, _visualizer.Box.Rect.Height - 30 );
				if ( _bars[i].Parent != _visualizer )
					_bars[i].Parent = _visualizer;
			}
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Radio.Title, Radio.On );
	}
}
