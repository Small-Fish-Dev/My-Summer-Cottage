@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<SideButton
		ImagePath="ui/hud/goback.png"
		Title="Go back"
		Subtitle="To main menu"
		OnClick=@( () => { Screen = MainMenuHud.MenuScreen.MainMenu; } )
		style="position: absolute; top: 50px;"/>

	<div class="sweet-memories">
		<img src=@(_currentArt) style="opacity: @_imageOpacity"/>
	</div>

	<div class="credits" ondrag="@( () => StopScrolling() )" onclick="@( () => StopScrolling() )" @ref=" _creditsPanel">
		<div class="padding"></div>

		<div class="center">
			<img class="title" src="ui/mainmenu/title.png"/>
		</div>

		<h1>- CREDITS -</h1>

		<h2>SMALL FISH</h2>
		<div class="row">
			<div class="name">ceitine</div>
			<div class="role">Gameplay Lead, Programmer, Shaders, Finnish Culture Сonsultant</div>
		</div>
		<div class="row">
			<div class="name">CyberAgent</div>
			<div class="role">Story Lead, Producer, Modeller, Events</div>
		</div>
		<div class="row">
			<div class="name">gio</div>
			<div class="role">UI Programmer</div>
		</div>
		<div class="row">
			<div class="name">Grodbert</div>
			<div class="role">Art Lead, Character Artist, Animator</div>
		</div>
		<div class="row">
			<div class="name">Luke</div>
			<div class="role">Props & Items Artist, Clothing Artist, Particle Artist, Shaders, Events and Npcs</div>
		</div>
		<div class="row">
			<div class="name">matek</div>
			<div class="role">Systems Programmer, Gameplay Programmer, UI Programmer, Shaders, Sound Design</div>
		</div>
		<div class="row">
			<div class="name">rndtrash (Shlako)</div>
			<div class="role">System Programmer, NokLa Sounds, UI Programmer</div>
		</div>
		<div class="row">
			<div class="name">ubre</div>
			<div class="role">Project Lead, Gameplay Programmer</div>
		</div>
		<div class="row">
			<div class="name">wheatleymf</div>
			<div class="role">Art Direction, Ambient Artist, Foliage & Prop artist, Mapper, UI Designs, Shaders</div>
		</div>
		<div class="center">
			<div>Visit our website</div>
			<div class="link">https://smallfi.sh</div>
			<div>for more information about our team and the projects we made</div>
		</div>

		<h2>MUSIC & SOUND EFFECTS</h2>
		<div class="horizontal">
			<div class="vertical" style="flex-basis: 0; flex-grow: 1">
				<div class="bold center">Gus and the Ganders: Surfin 81</div>
				<div class="center">by Dawdle</div>
			</div>
			<div class="vertical" style="flex-basis: 0; flex-grow: 1">
				<div class="bold center">Ero Vaimosta</div>
				<div class="center">by Zakkujo</div>
			</div>
			<div class="vertical" style="flex-basis: 0; flex-grow: 1">
				<div class="bold center">Effects</div>
				<div class="center">from ZapSplat</div>
			</div>
		</div>

		<h2>SPECIAL THANKS</h2>
		<div class="center">rndtrash: shoutouts to my hampter Baller for biting my fingers</div>
		<div class="center">Grodbert: special thanks to all insects out there for making the world beautiful</div>
		<div class="center">CyberAgent: thank you alcohol, my fiance, and my funni cat</div>
		<div class="center">wheatleymf: shoutout to all my undocumented shader API homies</div>

		<h1>Thank you for playing our game!</h1>
		<h1 class="row">&gt;&lt;(((°></h1>

		<div class="padding"></div>
	</div>
</root>

@code {

	/// <summary>
	///	Measured in percents of screen height per second
	/// </summary>
	public const float ScrollSpeed = 0.01f;

	public const float ScrollDelay = 2;

	public const float PictureDelay = 5;
	public const float PictureFade = 1;

	public MainMenuHud.MenuScreen Screen { get; set; }

	private TimeUntil _canScroll;
	private Panel _creditsPanel;

	private static readonly List<string> Pictures = new()
	{
		"ui/credits/ceitine.png",
		"ui/credits/cyber.png",
		"ui/credits/gio.png",
		"ui/credits/grodbert.png",
		"ui/credits/luke.png",
		"ui/credits/matek.png",
		"ui/credits/shlako.png",
		"ui/credits/ubre.png",
		"ui/credits/wheatley.png"
	};

	private string _currentArt;

	private int CurrentArtIndex
	{
		get
		{
			return _currentArtIndex;
		}

		set
		{
			_currentArtIndex = value % Pictures.Count;
			_currentArt = Pictures[_currentArtIndex];
			_timeSincePicture = 0;
			_imageOpacity = 1;
		}
	}

	private int _currentArtIndex;
	private float _imageOpacity = 0;
	private TimeSince _timeSincePicture = 0;

	public Credits()
	{
		CurrentArtIndex = 0;
	}

	private void StopScrolling()
	{
		_canScroll = ScrollDelay;
	}

	public override void Tick()
	{
		if ( _canScroll )
		{
			_creditsPanel.ScrollVelocity += Vector2.Up * _creditsPanel.Box.Rect.Height * ScrollSpeed * RealTime.Delta;
		}

		if ( _creditsPanel.ScrollSize.y <= _creditsPanel.ScrollOffset.y )
		{
			// TODO: FUCK YOU, ALEX, FUCK YOU!!!
			// _creditsPanel.ScrollOffset = _creditsPanel.ScrollOffset.WithY( _creditsPanel.Box.RectInner.Height );
			_creditsPanel.ScrollVelocity = Vector2.Down * _creditsPanel.ScrollSize.y * 100;
		}

		if ( _timeSincePicture >= PictureDelay )
		{
			if ( _timeSincePicture >= PictureDelay + PictureFade )
				_imageOpacity = 0;
			else
				CurrentArtIndex++;
		}
	}

	protected override int BuildHash() => HashCode.Combine( _currentArt, _imageOpacity );

}
