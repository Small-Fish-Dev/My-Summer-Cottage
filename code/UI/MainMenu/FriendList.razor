@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<div class="header">Join your friends!</div>

	<div class="friends">
		@if ( lobbies.Count > 0 )
		{
			foreach ( var data in lobbies )
			{
				<div class="friend">
					<div class="container">
						<div class="avatar">
							<img src="avatarbig:@data.Host.Id" />
						</div>

						<div class="user">
							<div>@data.Host.Name</div>
							<div class="small">currently in lobby @(data.Players)/@(maxPlayers)</div>
						</div>
					</div>
					<div class="join @(data.Players >= maxPlayers ? "disabled" : "")" @onclick=@(() => JoinGame( data ))>
						@(data.Players >= maxPlayers ? "FULL LOBBY" : "JOIN")
					</div>
				</div>
			}
		} 
		else
		{
			<div class="no-friends">you have no friends lozzer. ://</div>
		}
	</div>

	<div class="footer">
		<p class="orange">IMPORTANT:</p>
		As a lobby member, you cannot take part in the host's story tasks and will only be able to continue the story at your own cottage.
	</div>
</root>

@code {
	private int maxPlayers => NetworkManager.MAX_PLAYERS;
	private struct LobbyData
	{
		public Friend Host;
		public ulong ServerId;
		public int Players;
	}

	private const float QUERY_DELAY = 10f;
	private List<LobbyData> lobbies = new();
	TimeUntil _nextQuery;
	bool _connecting;

	public FriendList()
	{
		CreatorComponent.LobbyId = null;
	}

	private async void JoinGame( LobbyData data, bool own = false )
	{
		if ( _connecting )
			return;

		_connecting = true;

		if ( MainMenuHud.SaveData.Has )
		{
			LoadingScreen.Title = "Connecting to server...";
			var success = await GameNetworkSystem.TryConnectSteamId( data.ServerId );
		} 
		else
		{
			CreatorComponent.LobbyId = data.ServerId;
			SceneHandler.ChangeScene( SaunaScene.Creation );
		}

		_connecting = false;
	}

	private void Query() => 
		new Action( async () => 
		{
			var all = await Networking.QueryLobbies();
			lobbies.Clear();
			foreach ( var lobby in all )
			{
				long id;
				try
				{
					id = Convert.ToInt64( lobby.Map );
				}
				catch ( Exception ex )
				{
					Log.Error( $"Ignoring invalid lobby {lobby.Map}!" );
					continue;
				}

				var user = new Friend( id );
				if ( !user.IsFriend || user.IsMe || lobbies.Any( x => x.Host.Id == user.Id ) )
					continue;

				lobbies.Add( new LobbyData
				{
					Host = user,
					ServerId = lobby.LobbyId,
					Players = lobby.Members
				} );
			}
		} ).Invoke();

	public override void Tick()
	{
		if ( _nextQuery )
		{
			Query();
			_nextQuery = QUERY_DELAY;
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( lobbies.HashCombine( x => x.ServerId ) );
	}
}
