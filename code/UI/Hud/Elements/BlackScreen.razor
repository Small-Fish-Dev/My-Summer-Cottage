@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Utility
@namespace Sauna
@inherits PanelComponent

<root style="opacity: @(Opacity)"></root>

@code {
    public enum State
    {
        Starting,
        Black,
        Ending,
        Deleting
    }

    TimeUntil endTransition;
    public State CurrentState;

    [Property]
    [Range( 0.1f, 10f, 0.1f )]
    public float StartingTransition { get; set; } = 2f;
    [Property]
    [Range(0.1f, 10f, 0.1f)]
    public float BlackTransition { get; set; } = 1f;
    [Property]
    [Range(0.1f, 10f, 0.1f)]
    public float EndingTransition { get; set; } = 1f;

    public float Opacity = 0f;

    public void Start()
    {
        CurrentState = State.Starting;
        endTransition = StartingTransition;
    }

    protected override void OnUpdate()
    {
        Opacity = CurrentState switch
        {
            State.Starting => Easing.EaseIn( endTransition.Fraction ),
            State.Black => 1f,
            State.Ending => 1f - Easing.EaseOut( endTransition.Fraction ),
            _ => 0f
        };

        if (endTransition <= 0f)
        {
            endTransition = CurrentState switch
            {
                State.Starting => BlackTransition,
                State.Black => EndingTransition,
                _ => 0f
            };

            CurrentState++;

            if (CurrentState == State.Deleting)
                Destroy();
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Opacity);
    }
}
