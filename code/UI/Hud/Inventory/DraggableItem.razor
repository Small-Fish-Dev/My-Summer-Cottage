@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<img src=@texture.ResourcePath/>
	<div class="title-container">
		<label>@name</label>
	</div>
</root>

@code {

	protected bool InitialTransitionComplete { get; private set; }

	public ItemComponent ItemComponent { get; private set; }

	public InventorySlot LastHoveredSlot { get; internal set; }

	private static float XyMultiplier => -6.3f;
	private static float ZMultiplier => 6.9f;

	private Vector2 _velocity = Vector2.Zero;
	private Vector2 _holdPoint = Vector2.Zero;
	private Vector2 _lastPosition = Vector2.Zero;
	private string name;
	private Texture texture;

	public DraggableItem( InventorySlot slot, Vector2 holdPoint )
	{
		Style.ZIndex = 99;

		Parent = slot;

		// just center on mouse lol
		var size = slot.Box.Rect.Size;
		_holdPoint = size / 2;

		SetPositionInScreenPixels( Mouse.Position );
		SetSizeInScreenPixels( size );

		ItemComponent = slot.Item;

		// Use the slot item image
		name = slot.Item.Name;
		texture = slot.Item.IconTexture;

		PlaySound( "drag" );
	}

	private void SetSizeInScreenPixels( Vector2 v )
	{
		Style.Width = Length.Pixels( v.x * ScaleFromScreen );
		Style.Height = Length.Pixels( v.y * ScaleFromScreen );
	}

	public void SetPositionInScreenPixels( Vector2 v )
	{
		var p = v;
		var parentRect = Parent.Box.Rect;

		p -= parentRect.TopLeft;

		p -= _holdPoint;

		p *= ScaleFromScreen;

		Style.Left = p.x;
		Style.Top = p.y;

		_lastPosition = v;
	}

	private void UpdateVelocity( Vector2 delta )
	{
		_velocity += delta * 0.02f;
		_velocity = _velocity.Clamp( -10, 10 );
	}

	public virtual void AddPositionDeltaInScreenPixels( Vector2 d )
	{
		UpdateVelocity( d );
		SetPositionInScreenPixels( _lastPosition + d );
	}

	public override void Tick()
	{
		base.Tick();

		if ( !InitialTransitionComplete )
		{
			if ( !HasActiveTransitions )
				InitialTransitionComplete = true;

			return;
		}

		_velocity = Vector2.Lerp( _velocity, Vector2.Zero, Time.Delta * 10.0f );

		Style.TransformOriginX = Length.Fraction( _holdPoint.x / Box.Rect.Width );
		Style.TransformOriginY = Length.Fraction( _holdPoint.y / Box.Rect.Height );

		var transform = new PanelTransform();
		transform.AddRotation( _velocity.y * XyMultiplier, -_velocity.x * XyMultiplier, _velocity.x * _velocity.y * ZMultiplier );

		Style.Transform = transform;

		StateHasChanged();
	}

}
