@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<ScenePanel class="scene" @ref=_scenePanel />
	<div class="name">
		<text>First Name</text>
		<text>Really Long Last Name</text>
	</div>
</root>

@code {
	private SceneWorld _sceneWorld;
	private ScenePanel _scenePanel;
	private SceneModel _character;
	private SceneLight _sceneLight;
	private SceneDirectionalLight _sceneDirectionalLight;
	private float _yaw = 0f;
	private bool _isDragging = false;

	protected override void OnAfterTreeRender(bool firstTime)
	{
		base.OnAfterTreeRender(firstTime);

		_sceneWorld ??= new SceneWorld();
		_sceneLight ??= new SceneLight( _sceneWorld, Vector3.Forward * 15f, 1000f, Color.White * 4f );
        _sceneDirectionalLight ??= new SceneDirectionalLight( _sceneWorld, global::Rotation.From( 45, -45, 45 ), Color.White * 10f );
		_character ??= new SceneModel( _sceneWorld, "models/guy/guy.vmdl", new Transform(Vector3.Zero, Rotation.From(0, _yaw, 0)) );
		_scenePanel.World = _sceneWorld;
		_scenePanel.Camera.FieldOfView = 5f;

		FitCamera();
	}

	private void FitCamera()
	{
		var bounds = _character.Model.Bounds;
		var max = bounds.Size;
		var radius = MathF.Max( max.x, MathF.Max( max.y, max.z ) );
		var dist = radius / MathF.Sin( _scenePanel.Camera.FieldOfView.DegreeToRadian() );

		var viewDirection = Vector3.Forward;
		var pos = viewDirection * dist + bounds.Center;

		_scenePanel.Camera.Position = pos;
		_scenePanel.Camera.Rotation = global::Rotation.LookAt( bounds.Center - _scenePanel.Camera.Position ).RotateAroundAxis( -viewDirection, 90 );
		_sceneLight.Position = pos + _scenePanel.Camera.Rotation.Forward * 500f;
	}

	public override void OnButtonEvent( ButtonEvent e )
	{
		if ( e.Button == "mouseleft" )
			_isDragging = e.Pressed;

		base.OnButtonEvent( e );
	}

	public override void Tick() 
	{
		if (_character is null)
			return;

		if ( _isDragging )
			_yaw += Mouse.Delta.x * 0.20f;

		_character.Update(RealTime.Delta);
		_character.Rotation = Rotation.From(0, _yaw, 0);
	}
}
