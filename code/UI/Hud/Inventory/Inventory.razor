@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<SideButton 
		Title="Tasks" 
		Subtitle="Press @(Input.GetButtonOrigin( InputAction.Tasks )) or click here"
		OnClick=@(() => FullScreenManager.Instance.Display(FullScreenManager.FullScreenPanel.TaskLog))
		ImagePath="ui/hud/task_completed.png"
		IsInverted=@(true)
		style="position: absolute; top: 50px; right: 0px;" 
	/>
	<div class="section" style="flex-direction: row; align-items: center; justify-content: flex-end;">
		<div style="flex-direction: column; flex-shrink: 0; align-items: flex-end;">
			<InventorySlot EquipSlotIndex=@EquipSlot.Head Item=@Player.Local.Inventory.EquippedItems[(int)EquipSlot.Head]/>
			<InventorySlot EquipSlotIndex=@EquipSlot.Face Item=@Player.Local.Inventory.EquippedItems[(int)EquipSlot.Face]/>
			<div>
				<InventorySlot EquipSlotIndex=@EquipSlot.Hand Item=@Player.Local.Inventory.EquippedItems[(int)EquipSlot.Hand]/>
				<InventorySlot EquipSlotIndex=@EquipSlot.Body Item=@Player.Local.Inventory.EquippedItems[(int)EquipSlot.Body]/>
			</div>
			<InventorySlot EquipSlotIndex=@EquipSlot.Legs Item=@Player.Local.Inventory.EquippedItems[(int)EquipSlot.Legs]/>
			<InventorySlot EquipSlotIndex=@EquipSlot.Feet Item=@Player.Local.Inventory.EquippedItems[(int)EquipSlot.Feet]/>
		</div>
		<CharacterRenderer @ref=_renderer />
	</div>
	<div class="section" style="width: 670px;">
		<text class="title">INVENTORY</text>
		<div class="items">
			@for ( var index = 0; index < Player.Local.Inventory.BackpackItems.Count; index++ )
			{
				var item = Player.Local.Inventory.BackpackItems[index];
				<InventorySlot Item=@item BackpackSlotIndex=@index />
			}
		</div>
		<div style="align-items: center; margin: 20px 5px;">
			<div class="total-weight">
				<text>TOTAL WEIGHT: </text>
				<text class="active-weight">@Player.Local.Inventory.GetTotalWeightInGrams().ToKilograms() kg</text>
				<text class="max">/ @Sauna.Inventory.MAX_WEIGHT_IN_GRAMS.ToKilograms() kg</text>
			</div>
		</div>
		<ExperienceBar IsInventoryScreen=@true style="opacity: 1; margin: 30px 5px;" />
		<div class="inputs">
			<InputHint Hint="Drag items"  Input=@InputAction.LeftClick />
			<InputHint Hint="View additional item actions"  Input=@InputAction.RightClick />
			<InputHint Hint="Close inventory screen"  Input=@InputAction.Inventory />
		</div>
	</div>
</root>

@code {
	public static Inventory Instance { get; private set; }

	public Inventory() => Instance = this;

	CharacterRenderer _renderer;

	// We want the inspect menu to be apart of the inventory so both close.
	public void Inspect( ItemComponent item )
	{
		if ( item is not null )
			AddChild( new InspectItem( item ) );
	}

	public void OnChanged()
	{
		_renderer.Refresh();
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(
			Player.Local.Level,
			Player.Local.Experience,
			Player.Local.Inventory.BackpackItems.HashCombine( i => i?.GetHashCode() ?? -1 ),
			Player.Local.Inventory.EquippedItems.HashCombine( i => i?.GetHashCode() ?? -1 )
		);
	}

}
