@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root onclick=@(() => Close())>
	@if (_item is ItemEquipment equipment)
	{
		<ContextMenuOption ]
			Description=@(equipment.Equipped ? "Unequip" : "Equip") 
			ImagePath="ui/hud/inv_actions_equip.png" 
			onclick=@(() => ToggleEquip(equipment)) 
		/>
	}
	<ContextMenuOption ]
		Description="Inspect"
		ImagePath="ui/hud/inv_actions_inspect.png" 
		onclick=@(() => Inspect(_item)) 
	/>
	<ContextMenuOption ]
		Description="Drop"
		ImagePath="ui/hud/inv_actions_drop.png" 
		onclick=@(() => Player.Local.Inventory.DropItem(_item)) 
	/>
</root>

@code {
	private static ContextMenu _instance;
	private ItemComponent _item;

	public static void Open(ItemComponent item)
	{
		Close();

		var fraction = Mouse.Position / Screen.Size;

		_instance = new();
		_instance.Style.Left = Length.Fraction( fraction.x );
		_instance.Style.Top = Length.Fraction( fraction.y );
		_instance._item = item;
	
		Hud.Instance.Panel.AddChild(_instance);
	}

	public static bool IsOpen()
	{
		return _instance != null && _instance.IsValid();
	}

	public static void Close()
	{
		_instance?.Delete();
		_instance = null;
	}

	private void Inspect( ItemComponent item )
	{
		Inventory.Instance.Inspect(item);
	}

	private void ToggleEquip( ItemEquipment equipment )
	{
		if (equipment.Equipped)
			Player.Local.Inventory.UnequipItem(equipment);
		else
			Player.Local.Inventory.EquipItem(equipment);

		Inventory.Instance?.OnChanged();
	}

	public override void Tick()
	{
		var mousePosition = Mouse.Position * ScaleFromScreen;
		var boxRect = (Box.Rect * ScaleFromScreen).Grow( 5f );

		if ( !boxRect.IsInside( mousePosition ) )
			Delete();
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(_item is ItemEquipment);
	}
}
