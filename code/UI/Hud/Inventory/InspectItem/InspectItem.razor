@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<SideButton 
		Title="Inventory" 
		Subtitle="Click here to return"
		 OnClick=@(() => Delete()) 
		 style="position: absolute; top: 50px;" 
	/>
	<ScenePanel class="scene" @ref=_scenePanel />
	<div class="info">
		<ItemInformation Item=@_item style="max-width: 500px;" />
	</div>
</root>

@code {
	private static InspectItem _instance;

	private ItemComponent _item;
	private SceneWorld _sceneWorld;
	private ScenePanel _scenePanel;
	private SceneModel _child;
	private SceneModel _model;
	private SceneLight _sceneLight;
	private SceneDirectionalLight _sceneDirectionalLight;
	private bool _isDragging = false;
	private Transform _cameraTransform;
	private float _scrollDelta;
	private float _distance;

	private bool HasDescription => !String.IsNullOrEmpty(_item.Description);

	public InspectItem(ItemComponent item)
	{
		_instance?.Delete();
		_instance = null;
		_instance = this;
		_item = item;
	}

	protected override void OnAfterTreeRender(bool firstTime)
	{
		base.OnAfterTreeRender(firstTime);

		_sceneWorld ??= new SceneWorld();
		_sceneLight ??= new SceneLight( _sceneWorld, Vector3.Forward * 15f, 1000f, Color.White * 4f );
		_sceneDirectionalLight ??= new SceneDirectionalLight( _sceneWorld, global::Rotation.From( 45, -45, 45 ), Color.White * 10f );

		var renderer = _item.Components.Get<ModelRenderer>(FindMode.EverythingInSelfAndDescendants);
		if ( _item is ItemEquipment equipment && equipment.IsClothing )
		{
			_model ??= new SceneModel( _sceneWorld, "models/guy/guy.vmdl", global::Transform.Zero );
			_child ??= new SceneModel( _sceneWorld, renderer.Model, global::Transform.Zero );
			_model.ColorTint = Color.Gray;
			if ( equipment.UseSkinTint )
				_child.ColorTint = Color.Gray;
			else
				_child.ColorTint = renderer.Tint;

			_child.SetMaterialGroup( renderer.MaterialGroup );
			_model.AddChild( "cloth", _child );
			_model.Update( Time.Delta );
			_child.Update( Time.Delta );

			var bg = equipment.HideBodygroups;
			_model.SetBodyGroup( "head", bg.HasFlag( HiddenBodyGroup.Head ) ? 1 : 0 );
			_model.SetBodyGroup( "torso", bg.HasFlag( HiddenBodyGroup.Torso ) ? 1 : 0 );
			_model.SetBodyGroup( "hands", bg.HasFlag( HiddenBodyGroup.Hands ) ? 1 : 0 );
			_model.SetBodyGroup( "legs", bg.HasFlag( HiddenBodyGroup.Legs ) ? 1 : 0 );
			_model.SetBodyGroup( "feet", bg.HasFlag( HiddenBodyGroup.Feet ) ? 1 : 0 );
		}
		else
		{
			_model ??= new SceneModel( _sceneWorld, renderer.Model, global::Transform.Zero );
			_model.SetMaterialGroup( renderer.MaterialGroup );
		}

		_scenePanel.World = _sceneWorld;
		_scenePanel.Camera.FieldOfView = 120f;

		if (_cameraTransform.Position == Vector3.Zero)
		{
			_scenePanel.Camera.FitModel(_child ?? _model);
			_distance = _scenePanel.Camera.Position.Distance(_model.Model.Bounds.Center);
			_cameraTransform = new Transform(_scenePanel.Camera.Position, _scenePanel.Camera.Rotation);
		}
	}

	public override void OnButtonEvent( ButtonEvent e )
	{
		if ( e.Button == "mouseleft" )
			_isDragging = e.Pressed;

		base.OnButtonEvent( e );
	}

	public override void OnMouseWheel(Vector2 value)
	{
		_scrollDelta = value.y;

		base.OnMouseWheel(value);
	}

	public override void Tick() 
	{
		var target = _child ?? _model;
		if (target is null)
			return;

		if (_isDragging)
		{
			_cameraTransform = _cameraTransform.RotateAround(target.Model.Bounds.Center, Rotation.FromAxis(_cameraTransform.Up, -Mouse.Delta.x * 0.20f));
			_cameraTransform = _cameraTransform.RotateAround(target.Model.Bounds.Center, Rotation.FromAxis(_cameraTransform.Right, -Mouse.Delta.y * 0.20f));
		}

		_distance += _scrollDelta * 3f;
		_distance = _distance.Clamp(10f, 100f);
		_cameraTransform.Position = target.Model.Bounds.Center - _cameraTransform.Forward * _distance;
		_scrollDelta = 0;

		_scenePanel.Camera.Position = Vector3.Lerp(_scenePanel.Camera.Position, _cameraTransform.Position, RealTime.Delta * 40.0f);
		_scenePanel.Camera.Rotation = Rotation.Lerp(_scenePanel.Camera.Rotation, _cameraTransform.Rotation, RealTime.Delta * 50.0f);
		_sceneLight.Position = _scenePanel.Camera.Position;

		target.Update(RealTime.Delta);
	}
}
