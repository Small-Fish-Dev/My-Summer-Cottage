@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root @onrightclick=@( () => OpenContextMenu() ) class="@CurrentDropTargetClassSelectors">
	<div class="border"/>
	<div class="background"/>
	@if ( Item is not null )
	{
		<div class="item @HasChildDraggableClassSelector" onmouseover=@( () => OnItemHover() ) onmouseout=@( () => OnItemHoverExit() )>
			<img src=@Item.IconTexture.ResourcePath/>
			<text class="count @(!Item.IsStackable ? "hidden" : "")">@(Item.Count)x</text>
		</div>
	}
	@if ( EquipSlotIndex is not null )
	{
		<img class="slot" src=@EquipSlotIndex?.GetIcon()/>
	}
</root>

@code {
	public ItemComponent Item { get; set; }
	public EquipSlot? EquipSlotIndex { get; set; } = null;
	public int? BackpackSlotIndex { get; set; } = null;
	private DraggableItem ChildDraggable { get; set; }
	private string HasChildDraggableClassSelector => ChildDraggable == null ? "" : "has-child-draggable";

	// is-drop-target,
	// can-drop: if the draggable is usable in this slot,
	private string CurrentDropTargetClassSelectors
	{
		get
		{
			if ( DraggableItem.Current == null )
				return "";

			var s = "";

			if ( IsHoveredByMouse() )
				s += "is-drop-target ";

			if ( CanDraggableDrop() )
				s += "can-drop ";

			return s;
		}
	}

	// Can the draggable (DraggableItem.Current) drop here?
	private bool CanDraggableDrop()
	{
		if ( DraggableItem.Current == null )
			return false; // No draggable

		if ( BackpackSlotIndex != null )
			return true; // Backpack slots allow everything!

		if ( EquipSlotIndex != null )
		{
			if ( DraggableItem.Current.ItemComponent is not ItemEquipment itemEquipment )
				return false; // Can't drop into this equipment slot, the item isn't equipment!

			return itemEquipment.Slot == EquipSlotIndex;
		}

		return false;
	}

	private bool _isHoveringItem { get; set; } = false;
	private TimeSince sinceClick;
	protected override int BuildHash() => HashCode.Combine( Item?.GetHashCode(), IsHoveredByMouse(), DraggableItem.Current );

	private void OpenContextMenu()
	{
		if ( Item is not null )
			ContextMenu.Open( Item );
	}

	private async void OnItemHover()
	{
		_isHoveringItem = true;

		await GameTask.Delay( 400 );

		if ( _isHoveringItem && !ContextMenu.IsOpen() && Item is not null )
			HoverPanel.Open( Item );
	}

	private void OnItemHoverExit()
	{
		_isHoveringItem = false;
		HoverPanel.Close();
	}

	/// Update the ItemComponent instance from the Slot / SlotIndex properties
	public void UpdateItem()
	{
		Inventory.Instance?.OnChanged();
		var inventory = Player.Local.Inventory;
		if ( EquipSlotIndex != null )
		{
			Item = inventory.EquippedItems[(int)EquipSlotIndex];
			StateHasChanged();
			return;
		}

		if ( BackpackSlotIndex != null )
		{
			Item = inventory.BackpackItems[(int)BackpackSlotIndex];
			StateHasChanged();
			return;
		}

		StateHasChanged();
		throw new Exception( "EquipSlotIndex or BackpackSlotIndex needs to be provided to InventorySlot!" );
	}

	/// Is mouse inside the slot bounding box?
	public bool IsHoveredByMouse() => Box.Rect.IsInside( Mouse.Position );

	protected override void OnMouseDown( MousePanelEvent e )
	{
		base.OnMouseDown( e );

		if ( e.Button != "mouseleft" )
			return;

		if ( sinceClick < 0.3f && Item is ItemEquipment equipment )
		{
			if ( equipment.Equipped )
				Player.Local.Inventory.UnequipItem( equipment );
			else
				Player.Local.Inventory.EquipItemFromBackpack( equipment );

			Inventory.Instance.OnChanged();
			sinceClick = 0;

			return;
		}

		sinceClick = 0;

		if ( ChildDraggable != null )
			return;

		if ( Item == null )
			return; // Ignore itemless slot

		ChildDraggable = new DraggableItem( this, holdPoint: Mouse.Position - Box.Rect.TopLeft );
		ChildDraggable.SetPositionInScreenPixels( Mouse.Position );

		var fraction = (Mouse.Position - Box.Rect.Size / 2f) / Screen.Size;
		ChildDraggable.Style.Left = Length.Fraction( fraction.x );
		ChildDraggable.Style.Top = Length.Fraction( fraction.y );

		Hud.Instance.Panel.AddChild( ChildDraggable );
	}

	private void MoveItemTo( InventorySlot targetSlot )
	{
		var fromSlot = this;
		var inventory = Player.Local.Inventory;

		// From backpack slot.
		if ( fromSlot.BackpackSlotIndex is not null )
		{
			// To backpack slot.
			if ( targetSlot.BackpackSlotIndex is not null )
				inventory.SwapItems( fromSlot.BackpackSlotIndex.Value, targetSlot.BackpackSlotIndex.Value );
			// To equipment slot.
			else if ( targetSlot.EquipSlotIndex is not null )
				inventory.SwapItems( fromSlot.BackpackSlotIndex.Value, targetSlot.EquipSlotIndex.Value );
		}

		// From equipment slot.
		else if ( fromSlot.EquipSlotIndex is not null )
		{
			// To backpack slot.
			if ( targetSlot.BackpackSlotIndex is not null )
				inventory.SwapItems( fromSlot.EquipSlotIndex.Value, targetSlot.BackpackSlotIndex.Value );
		}

		PlaySound("drop");

		// Update both slots
		fromSlot.UpdateItem();
		targetSlot.UpdateItem();
	}

	private void MoveOntoCharacter()
	{
		var fromSlot = this;
		var inventory = Player.Local.Inventory;

		if ( fromSlot.Item is ItemEquipment equipment )
			Player.Local.Inventory.EquipItemFromBackpack( equipment );

		fromSlot.UpdateItem();
	}

	protected override void OnMouseUp( MousePanelEvent e )
	{
		base.OnMouseUp( e );

		if ( ChildDraggable == null )
			return;

		var rendererTarget = Inventory.Instance.Descendants.OfType<CharacterRenderer>().FirstOrDefault( v => v.IsHoveredByMouse() );
		var targetSlot = Inventory.Instance.Descendants.OfType<InventorySlot>().FirstOrDefault( v => v.IsHoveredByMouse() );
		if ( targetSlot != null && targetSlot.Item != Item )
		{
			MoveItemTo( targetSlot );
		}
		else if ( rendererTarget != null )
		{
			MoveOntoCharacter();
		}

		ChildDraggable?.Delete();
		ChildDraggable = null;

		DraggableItem.ClearCurrent();
	}

	private Vector2 _lastMousePos;

	protected override void OnMouseMove( MousePanelEvent e )
	{
		base.OnMouseMove( e );

		if ( ChildDraggable == null )
			return;

		// Mouse.Delta returns 0,0 for small values?
		// Make our own delta!
		var delta = Mouse.Position - (_lastMousePos == -0 ? Mouse.Position : _lastMousePos);
		_lastMousePos = Mouse.Position;

		ChildDraggable.AddPositionDeltaInScreenPixels( delta );
		ChildDraggable.SetPositionInScreenPixels( Mouse.Position );
	}

}
