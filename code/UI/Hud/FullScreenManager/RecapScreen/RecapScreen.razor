@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<div class="title">Day @(Hud.Instance.GameTimeManager.Day - 1) completed!</div>
	<div class="information">
		<div class="sweet-memories" @ref=_memoryContainer >
			<div class="title" />
			<MemoryPanel 
				class="first back"
				Texture=@Texture.Load( FileSystem.Mounted, "ui/memories/first.png" )
				Caption="It was a tough day of avoiding all the CIA agents."
			/>

			<MemoryPanel 
				class="second back"
				Texture=@Texture.Load( FileSystem.Mounted, "ui/memories/second.png" )
				Caption="le cottage has le fallen"
			/>
		</div>

		<div class="progress">
			<div class="section" style="background-image: url(ui/hud/task_completed.png);">
				<div class="header">Task progress today:</div>
				<div class="task-container">
					<div class="tasks">
						<div class="task-title">@_primaryTasks.Count() Primary:</div>
						@foreach ( var task in _primaryTasks )
						{
							<div class="task @(!task.Successful ? "failed" : "")">
								<div class="checkbox"><div class="checkbox-inner @(task.Completed)" /></div>
								<text>@task.Name</text>
							</div>
						}
					</div>

					@if ( _secondaryTasks.Count() > 0 )
					{
						<div class="tasks">
							<div class="task-title">@_secondaryTasks.Count() Secondary:</div>
							@foreach ( var task in _secondaryTasks )
							{
								<div class="task @(!task.Successful ? "failed" : "")">
									<div class="checkbox"><div class="checkbox-inner @(task.Completed)" /></div>
									<text>@task.Name</text>
								</div>
							}
						</div>
					}
				</div>
			</div>
			<div class="section" style="background-image: url(ui/hud/moni.png);">
				<div class="header">Your current balance:</div>
				<div class="money-gain">
					<text>@(Player.Local.Money)mk</text>
				</div>
			</div>
			<div class="section" style="background-image: url(ui/hud/current_level.png);">
				<div class="header">Character statistics:</div>
				<div class="xp-bar">
					<div class="xp" style="width: @(MathF.Round((float)Player.Local.Experience / Player.Local.ExpPerLevel, 2) * 100f)%;" />
				</div>
				<div class="level">
					<text>Lv. @Player.Local.Level</text>
					<text class="xp-text">@Player.Local.Experience / @Player.Local.ExpPerLevel</text>
				</div>
			</div>
		</div>
	</div>
</root>

@code {
	private const float DISPLAY_TIME = 6f;

	private IEnumerable<SaunaTask> _primaryTasks => TaskMaster.Tasks.Where( x => x.IsPrimary ).OrderBy( x => !x.Successful );
	private IEnumerable<SaunaTask> _secondaryTasks => TaskMaster.Tasks.Where( x => !x.IsPrimary ).OrderBy( x => !x.Successful );

	TimeSince _sinceNext = DISPLAY_TIME;
	int _currentMemory;
	Panel _memoryContainer;
	MemoryPanel _currentPanel;

	public override void Tick()
	{
		if ( SweetMemories.All.Count == 0 )
			return;

		// Move to next memory.
		if ( _sinceNext > DISPLAY_TIME )
		{
			_currentPanel?.Delete();
			_currentMemory = _currentMemory >= SweetMemories.All.Count - 1 
				? 0
				: _currentMemory + 1;

			var memory = SweetMemories.All.ElementAt( _currentMemory );
			_currentPanel = _memoryContainer.AddChild<MemoryPanel>();
			_currentPanel.Texture = memory.Texture;
			_currentPanel.Caption = memory.Caption;

			_sinceNext = 0;
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( _currentMemory );
	}
}
