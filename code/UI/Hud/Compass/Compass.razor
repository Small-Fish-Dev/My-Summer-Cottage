@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<panel @ref=_container class="container">	
		<panel class="center" />
		@{
			var yaw = Player.Local.EyeAngles.yaw;
			var width = TextureWidth * ScaleToScreen;

			<panel 
				class="background"
		   		style="background-position-x: @(-width + width * (yaw + 180f) / 360f)px"
				@ref=_background >
			</panel>
		}
	</panel>
</root>

@code {
	private float ContainerWidth => 600f;
	private float TextureWidth => 2400f;

	private struct MarkerPanel
	{
		public Panel Panel;
		public Label Label;
		public Marker Marker;
	}

	private Panel _container;
	private Panel _background;
	private MarkerPanel[] markers { get; set; }

	protected override void OnAfterTreeRender(bool firstTime)
	{
		base.OnAfterTreeRender( firstTime );

		_container.Style.Width = Length.Pixels(ContainerWidth);
		_background.Style.BackgroundSizeX = Length.Pixels(TextureWidth);
		_background.Style.BackgroundSizeY = Length.Percent(100);

		if ( firstTime )
			markers = Marker.All.Select( marker =>
			{
				var color = marker.Color.ToString( true, false );
				var panel = _background.AddChild<Panel>( "marker" );
				panel.Style.BackgroundColor = color;

				var label = _background.AddChild<Label>( "name" );
				label.Style.FontColor = color;
				label.Text = marker.Name;

				return new MarkerPanel
				{
					Panel = panel,
					Label = label,
					Marker = marker,
				};
			} ).ToArray();

		var yaw = Player.Local.EyeAngles.yaw;
		var center = ContainerWidth / 2f;

		foreach ( var markerPanel in markers )
		{
			var panel = markerPanel.Panel;
			var label = markerPanel.Label;
			var marker = markerPanel.Marker;

			var diff = Rotation.LookAt( marker.Position - Player.Local.Transform.Position ).Yaw();
			var angle = (yaw - diff) / 45f;
			var dirtyLen = center + angle * center;
			var len = dirtyLen > 0
				? dirtyLen % TextureWidth
				: dirtyLen + TextureWidth;
			var opacity = MathX.Clamp( marker.Position.Distance( Player.Local.Transform.Position ) / 200f - 0.75f, 0, 1 );

			panel.Style.Left = len;
			panel.Style.Opacity = opacity;

			label.Style.Left = len;
			label.SetClass( "visible", len <= center + 40f && len >= center - 40f );
			label.Style.Opacity = opacity;
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Player.Local.EyeAngles.yaw, Player.Local.Transform.Position );
	}
}
