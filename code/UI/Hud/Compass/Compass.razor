@namespace Sauna.UI
@attribute [StyleSheet]
@using Sauna.Game
@inherits Panel

<root>
	<div @ref=_container class="container">	
		<div class="time">@(TimeSpan.FromSeconds( GameTimeManager.InGameSeconds ).ToString( @"hh\:mm" ))</div>
		<div class="direction">Facing @(Player.Local?.FacedDirection)</div>
		<div @ref=_line class="line" />
	</div>
</root>

@code {
	public static Compass Instance { get; private set; }
	
	public GameTimeManager GameTimeManager { get; set; }
	
	private float ContainerWidth => 650f;

	private struct MarkerData
	{
		public Panel Panel;
		public Marker Marker;
	}

	private Panel _container;
	private Panel _line;
	private List<MarkerData> _markers;

	public Compass()
	{
		Instance = this;
	}

	public void InitializeMarker( Marker marker )
	{
		var panel = _line.AddChild<Panel>( "marker" );
		if ( !string.IsNullOrEmpty( marker.Texture ) )
		{
			var img = panel.AddChild<Image>( "icon" );
			img.SetTexture( marker.Texture );
		}
		Log.Error(panel);
		_markers.Add( new MarkerData
		{
			Panel = panel,
			Marker = marker,
		} );
	}

	public void RemoveMarker( Marker marker )
	{
		var data = _markers?.FirstOrDefault( m => marker == m.Marker );
		if ( data == null )
			return;

		data?.Panel?.Delete();

		if ( data.HasValue )
			_markers.Remove( data.Value );
	}

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		_container.Style.Width = Length.Pixels( ContainerWidth );
		_line.Style.Width = Length.Pixels( ContainerWidth );

		_markers ??= Marker.All.Select( marker =>
		{
			var panel = _line.AddChild<Panel>( "marker" );
			if ( !string.IsNullOrEmpty( marker.Texture ) )
			{
				var img = panel.AddChild<Image>( "icon" );
				img.SetTexture( marker.Texture );
			}

			return new MarkerData
			{
				Panel = panel,
				Marker = marker,
			};
		} ).ToList();

		if ( Player.Local == null || _markers == null )
			return;

		var yaw = Player.Local.EyeAngles.Normal.yaw;
		var center = ContainerWidth / 2f;
		var width = ContainerWidth * 4;

		for ( int i = 0; i < _markers.Count; i++ )
		{
			var data = _markers[i];
			var panel = data.Panel;
			var marker = data.Marker;

			if ( panel?.Parent == null )
				_line.AddChild( panel );

			var diff = Rotation.LookAt( marker.Position - Player.Local.Transform.Position ).Yaw();
			var angle = (yaw - diff) / 45f;
			var dirtyLen = center + angle * center;
			var len = dirtyLen > 0
				? dirtyLen % width
				: dirtyLen + width;

			var distOpacity = MathX.Clamp( marker.Position.Distance( Player.Local.Transform.Position ) / 200f - 0.75f, 0, 1 );
			var centerOpacity = len > ContainerWidth / 2f
				? 1 - (len - ContainerWidth / 2f) / ContainerWidth * 2f
				: len / ContainerWidth * 2;
			var opacity = MathX.Lerp( 0, distOpacity, centerOpacity );

			panel.Style.Left = len;
			panel.Style.Opacity = opacity;
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(
			// Update every minute
			GameTimeManager.InGameSeconds / 60,
			Player.Local?.EyeAngles.yaw, Player.Local?.Transform.Position, _markers.Count );
	}
}
