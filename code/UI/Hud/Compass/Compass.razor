@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<div @ref=_container class="container">	
		<div class="time">@(DateTime.Now.ToString( "HH:mm" ))</div>
		<div class="direction">Facing @(Player.Local.StringDirection)</div>
		<div @ref=_line class="line" />
	</div>
</root>

@code {
	private float ContainerWidth => 650f;

	private struct MarkerData
	{
		public Panel Panel;
		public Marker Marker;
	}

	private Panel _container;
	private Panel _line;
	private MarkerData[] _markers;

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		_container.Style.Width = Length.Pixels( ContainerWidth );
		_line.Style.Width = Length.Pixels( ContainerWidth );

		_markers ??= Marker.All.Select( marker =>
		{
			var panel = _line.AddChild<Panel>( "marker" );
			if ( !string.IsNullOrEmpty( marker.Texture ) )
			{
				var img = panel.AddChild<Image>( "icon" );
				img.SetTexture( marker.Texture );
			}

			return new MarkerData
			{
				Panel = panel,
				Marker = marker,
			};
		} ).ToArray();

		if ( Player.Local == null || _markers == null )
			return;

		var yaw = Player.Local.EyeAngles.Normal.yaw;
		var center = ContainerWidth / 2f;
		var width = ContainerWidth * 4;

		foreach ( var data in _markers )
		{
			var panel = data.Panel;
			var marker = data.Marker;

			if ( panel?.Parent == null )
				_line.AddChild( panel );

			var diff = Rotation.LookAt( marker.Position - Player.Local.Transform.Position ).Yaw();
			var angle = (yaw - diff) / 45f;
			var dirtyLen = center + angle * center;
			var len = dirtyLen > 0
				? dirtyLen % width
				: dirtyLen + width;

			var distOpacity = MathX.Clamp( marker.Position.Distance( Player.Local.Transform.Position ) / 300f - 0.75f, 0, 1 );
			var centerOpacity = len > ContainerWidth / 2f
				? 1 - (len - ContainerWidth / 2f) / ContainerWidth * 2f
				: len / ContainerWidth * 2;
			var opacity = MathX.Lerp( 0, distOpacity, centerOpacity );

			panel.Style.Left = len;
			panel.Style.Opacity = opacity;
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Player.Local.EyeAngles.yaw, Player.Local.Transform.Position );
	}
}
