@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

@if ( !HasTarget )
	return;

<root>
	<image src="ui/hud/interaction-pointer.png" class="icon" />
	<div class="content">
		<text class="title">@Player.Local.TargetedGameObject.Name</text>

		<div class="interactions">
			@foreach(var interaction in _interactions)
			{
				@if ( CanInteract( interaction ) )
				{
					<div class="interaction">
						<inputhint class="hint" input=@interaction.Keybind />
						<text class="description">@interaction.Text</text>
					</div>
				}
			}
		</div>
	</div>
</root>

@code {
	private bool HasTarget => Player.Local?.TargetedGameObject is not null;
	private IEnumerable<Interaction> _interactions => Player.Local?.TargetedGameObject?.GetInteractions() ?? new List<Interaction>();
	private Vector2 _lerpPosition;

	private bool CanInteract( Interaction interaction )
		=> (interaction.Disabled is null || !interaction.Disabled())
		&& (!interaction.HasBounds || GetInteractionBounds(interaction).Contains(Player.Local.InteractionTrace.EndPosition));

	private BBox GetInteractionBounds(Interaction interaction)
		=> new BBox(interaction.Position - interaction.Extents / 2f, interaction.Position + interaction.Extents / 2f)
			.Transform(Player.Local.TargetedGameObject.Transform.World);

	public override void Tick() 
	{
		SetClass("visible", HasTarget);

		if (!HasTarget)
			return;

		var first = _interactions.First();
		var pos = Player.Local.TargetedGameObject.Transform.Position + Player.Local.InteractionBounds?.Center ?? 0;
		foreach ( var interaction in _interactions )
		{
			if ( CanInteract( interaction ) )
			{
				if ( interaction.HasBounds )
					pos = Player.Local.TargetedGameObject.Transform.Position + interaction.Position * Player.Local.TargetedGameObject.Transform.Rotation;

				if ( interaction.InputFunction( interaction.Keybind ) )
				{
					Player.Local.TargetedGameObject?.Network.TakeOwnership();
					interaction.Action?.Invoke(Player.Local, Player.Local.TargetedGameObject);

					var vector = (pos - Player.Local.Transform.Position) * Player.Local.Transform.Rotation.Inverse;
					Player.Local.BroadcastInteraction( vector, Rotation.LookAt( vector.Normal ) );
				}
			}
		}

		_lerpPosition = Vector2.Lerp( _lerpPosition, pos.ToScreen().Clamp( -0.5f, 1.5f ), 10f * Time.Delta );
        Style.Left = Length.Fraction( MathF.Floor( _lerpPosition.x * 200f + 0.5f ) / 200f );
        Style.Top = Length.Fraction( MathF.Floor( _lerpPosition.y * 200f + 0.5f ) / 200f );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(HasTarget, _interactions.HashCombine(i => HashCode.Combine(i.Text, CanInteract(i))));
	}
}
