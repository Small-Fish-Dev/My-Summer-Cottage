@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	<div @ref=_container class="container">	
		<div class="time">@(TimeSpan.FromSeconds( GameTimeManager.InGameSeconds ).ToString( @"hh\:mm" ))</div>
		<div class="direction">@(Player.Local?.FacedDirection)</div>
		<div @ref=_line class="line" />
	</div>
</root>

@code {
	public static Compass Instance { get; private set; }

	public GameTimeManager GameTimeManager { get; set; }

	private static float ContainerWidth => 650f;

	private Panel _container;
	private Panel _line;
	private static List<MarkerPanel> _markers;

	public Compass()
	{
		if ( _markers != null )
			foreach ( var marker in _markers )
			{
				if ( marker.Marker != null )
					continue;

				marker.Delete();
				_markers.Remove( marker );
			}

		Instance = this;
	}

	public void InitializeMarker( Marker marker )
	{
		var panel = _line.AddChild<MarkerPanel>( "marker" );
		panel.Marker = marker;
		_markers.Add( panel );
	}

	public void RemoveMarker( Marker marker )
	{
		var panel = _markers?.FirstOrDefault( m => marker == m.Marker );
		if ( panel == null )
			return;

		panel.Delete();
		_markers.Remove( panel );
	}

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		_container.Style.Width = Length.Pixels( ContainerWidth );
		_line.Style.Width = Length.Pixels( ContainerWidth );

		_markers ??= Marker.All.Select( marker =>
		{
			var panel = _line.AddChild<MarkerPanel>( "marker" );
			panel.Marker = marker;
			return panel;
		} ).ToList();

		if ( Player.Local == null || _markers == null )
			return;

		var yaw = Player.Local.EyeAngles.Normal.yaw;
		var center = ContainerWidth / 2f;
		var width = ContainerWidth * 4;

		for ( int i = 0; i < _markers.Count; i++ )
		{
			var panel = _markers[i];
			var marker = panel.Marker;
			if ( marker == null )
			{
				_markers.Remove( panel );
				panel.Delete();
				continue;
			}

			if ( panel?.Parent != _line )
				_line.AddChild( panel );

			var diff = Rotation.LookAt( marker.Position - Player.Local.Transform.Position ).Yaw();
			var angle = (yaw - diff) / 45f;
			var dirtyLen = center + angle * center;
			var len = dirtyLen > 0
				? dirtyLen % width
				: dirtyLen + width;

			var distOpacity = MathX.Clamp( marker.Position.Distance( Player.Local.Transform.Position ) / 200f - 0.25f, 0, 1 );
			var centerOpacity = len > ContainerWidth / 2f
				? 1 - (len - ContainerWidth / 2f) / ContainerWidth * 2f
				: len / ContainerWidth * 2;
			var opacity = MathX.Lerp( 0, distOpacity, centerOpacity );
			
			panel.ShowDistance = centerOpacity > 0.8f;
			panel.Style.Left = len;
			panel.Style.Opacity = opacity;
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(
			// Update every minute
			GameTimeManager.InGameSeconds / 60,
			Player.Local?.EyeAngles.yaw, Player.Local?.Transform.Position, 
			_markers?.HashCombine(m => HashCode.Combine(m?.GetHashCode())) 
		);
	}
}
