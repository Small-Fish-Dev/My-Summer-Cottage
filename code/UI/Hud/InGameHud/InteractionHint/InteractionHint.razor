@namespace Sauna.UI
@using Sauna.Event
@attribute [StyleSheet]
@inherits Panel

<root>
	@if ( !FromHands )
	{
		<image src="ui/hud/interaction-pointer.png" class="icon" />
	}

	<div class="content">
		<text class="title">@DisplayName</text>
		<div class="interactions">
			@foreach(var interaction in _interactions)
			{
				if ( !WithinBounds(interaction) || !IsAccessible(interaction) )
					continue;

				var canInteract = !interaction.Disabled();
				if ( canInteract || interaction.ShowWhenDisabled() )
				{
					var isActive = HasPriority( interaction.Keybind ) && canInteract;
					<div class="interaction">
						<inputhint class="hint" input=@interaction.Keybind DarkMode=@(!isActive) />
						<text class="description" style="color: @interaction.Color.Hex">@interaction.Text</text>
					</div>
				}
			}
		</div>
	</div>
</root>

@code {
	public bool FromHands { get; set; }

	private string DisplayName => _targetObject?.Components?.Get<ItemComponent>()?.Name ?? _targetObject?.Name;
	private GameObject _targetObject => FromHands
		? Player.Local?.Inventory?.EquippedItems?[(int)EquipSlot.Hand]?.GameObject
		: Player.Local?.TargetedGameObject;

	private static List<string> priorityList = new();
	private IEnumerable<Interaction> _interactions => _targetObject?.GetInteractions() ?? new List<Interaction>();
	private bool WithinBounds(Interaction interaction) => !interaction.HasBounds || GetInteractionBounds(interaction).Contains(Player.Local.InteractionTrace.EndPosition);
	private bool HasPriority( string key ) => FromHands || !priorityList.Contains( key.ToLower() );
	private BBox GetInteractionBounds(Interaction interaction)
		=> new BBox(interaction.Position - interaction.Extents / 2f, interaction.Position + interaction.Extents / 2f)
			.Transform(Player.Local.TargetedGameObject.Transform.World);

	private void AddToPriority( string key, bool forced = false )
	{
		if ( !FromHands && !forced ) 
			return;

		key = key.ToLower();
		var contains = priorityList.Contains( key );
		if ( contains ) 
			return;

		priorityList.Add( key );
	}

	public override void Tick() 
	{
		if ( FromHands ) priorityList.Clear();

		SetClass( "visible", ShowHint() );
		if (!HasClass("visible"))
			return;

		var pos = FromHands ? 0 : Player.Local.TargetedGameObject.Transform.Position + Player.Local.InteractionBounds?.Center ?? 0;
		foreach ( var interaction in _interactions )
		{
			if ( !WithinBounds(interaction) || !IsAccessible(interaction) )
				continue;

			var canInteract = !interaction.Disabled();
			if ( canInteract )
				AddToPriority( interaction.Keybind );

			if ( !HasPriority( interaction.Keybind ) )
				continue;

			if ( interaction.HasBounds && !FromHands )
				pos = Player.Local.TargetedGameObject.Transform.Position + interaction.Position * Player.Local.TargetedGameObject.Transform.Rotation;

			if (canInteract && interaction.InputFunction(interaction.Keybind))
			{
				_targetObject?.Network.TakeOwnership();
				interaction.Action?.Invoke(Player.Local, _targetObject);

				if (interaction.InputMode != InputMode.Down)
					Input.Clear(interaction.Keybind);

				if ( interaction.Identifier != String.Empty )
					EventMaster.InteractionInvoked( interaction.Identifier, _targetObject.Id, Player.Local.GameObject.Id ); // Pass off this interaction for events to find

				if ( !FromHands ) // No need to play use animation for held items.
				{
					var vector = (pos - Player.Local.Transform.Position) * Player.Local.Transform.Rotation.Inverse;
					Player.Local.BroadcastInteraction( vector, Rotation.LookAt( vector.Normal ), interaction.AnimationIdentifier );
				}
			}
		}

		if ( FromHands ) // No need to play use animation for held items.
			return;

		pos = pos.ToScreen().Clamp( -0.5f, 1.5f );
        Style.Left = Length.Fraction( MathF.Floor( pos.x * 200f + 0.5f ) / 200f );
        Style.Top = Length.Fraction( MathF.Floor( pos.y * 200f + 0.5f ) / 200f );
	}

	private bool ShowHint()
	{
		if (!_targetObject.IsValid())
			return false;

		if (!_targetObject.Components.TryGet<Interactions>( out var interactions ))
			return false;

		var interactionsAvailable = interactions.AllInteractions.Where((i) => (!i.Disabled() || i.ShowWhenDisabled()) && WithinBounds(i)).Any();
		if (!interactionsAvailable && interactions.HideOnEmpty)
			return false;

		return interactionsAvailable;
	}

	private bool IsAccessible(Interaction interaction)
	{
		if (FromHands && interaction.Accessibility.HasFlag(AccessibleFrom.Hands))
			return true;
		
		if (!FromHands && interaction.Accessibility.HasFlag(AccessibleFrom.World))
			return true;

		return false;
	}

	protected override int BuildHash()
	{
		return HashCode.Combine
		(
			DisplayName, 
			_targetObject.IsValid(),
			_interactions.HashCombine(i => HashCode.Combine(i.Text, i.Disabled(), WithinBounds(i), HasPriority(i.Keybind)))
		);
	}
}
