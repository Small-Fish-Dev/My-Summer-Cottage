@namespace Sauna.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	@if (SelectedFishInfo is null)
	{
		<div class="header">
			<img src="/ui/hud/fish_collection.png" />
			<div style="flex-direction: column;">
				<text class="title">Fishing Statistics</text>
				<text class="subtitle">
					Here is some information regarding your fishing adventures! 
					You can click on fish you've caught to view additional details.
				</text>
			</div>
		</div>
	}
	else
	{
		<div class="header">
			<ScenePanel class="scene" @ref=_scenePanel />
		</div>
		<div class="description">

		</div>
	}
</root>

@code {
	public FishLog.FishInfo SelectedFishInfo { get; set; }
	private FishRecord? _selectedFishRecord;

	private const int StarCount = 5;
	private SceneWorld _sceneWorld;
	private ScenePanel _scenePanel;
	private SceneModel _model;
	private SceneLight _sceneLight;
	private SceneDirectionalLight _sceneDirectionalLight;
	private Transform _cameraTransform;

	private void SelectFish( FishLog.FishInfo fish )
	{
		SelectedFishInfo = fish;
		if ( Player.Local.FishesCaught.TryGetValue( fish.PrefabPath, out var record ) )
			_selectedFishRecord = record;
		else
			_selectedFishRecord = null;

		_model?.Delete();
		_model = new SceneModel(_sceneWorld, SelectedFishInfo.ModelPath, new Transform(Vector3.Zero, Rotation.From(0, 0, 0)));
		_model.SetMaterialGroup(SelectedFishInfo.MaterialGroup);
	}

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		if ( SelectedFishInfo is null )
			return;

		_sceneWorld ??= new SceneWorld();
		_sceneLight ??= new SceneLight( _sceneWorld, Vector3.Forward * 15f, 1000f, Color.White * 4f );
		_sceneDirectionalLight ??= new SceneDirectionalLight( _sceneWorld, Rotation.From( 45, -45, 45 ), Color.White * 10f );

		_model ??= new SceneModel( _sceneWorld, SelectedFishInfo.ModelPath, new Transform( Vector3.Zero, Rotation.From( 0, 0, 0 ) ) );
		_model.SetMaterialGroup( SelectedFishInfo.MaterialGroup );
		_scenePanel.World = _sceneWorld;
		_scenePanel.Camera.FieldOfView = 50f;

		_scenePanel.Camera.FitModel( _model );
	}

	public override void Tick()
	{
		if ( _model is null )
			return;

		_cameraTransform = _cameraTransform.RotateAround( _model.Model.Bounds.Center, Rotation.FromAxis( _cameraTransform.Up, -10f * RealTime.Delta ) );

		_cameraTransform.Position = _model.Model.Bounds.Center - _cameraTransform.Forward;

		var transform = _model.Transform.RotateAround(0, Rotation.FromYaw(RealTime.Delta * 115f));
		_model.Position = transform.Position ;
		_model.Rotation = transform.Rotation;

		_scenePanel.Camera.FitModel( _model );
		_scenePanel.Camera.Position += Vector3.Forward * 10f;
		_sceneLight.Position = _scenePanel.Camera.Position;

		_model.Update( RealTime.Delta );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(SelectedFishInfo?.GetHashCode());
	}
}
