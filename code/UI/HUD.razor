@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits RootPanel

<style>
	HUD {
		position: absolute;
		left: 0px;
		top: 0px;
		width: 100%;
		height: 100%;
		color: white;
		font-family: Retro-Gaming;
		text-shadow: 2px 2px 0px black;
	}

	.wip {
		position: absolute;
		width: 100%;
		top: 85px;
		justify-content: center;
		font-size: 18px;
		opacity: 0.25;
	}

	.chat-input {
		position: absolute;
		width: 250px;
		min-height: 20px;
		opacity: 0;
		pointer-events: all;
		background-color: black;
		transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
		transform: translate(-50% 200px);
		border: 2px white;
		left: 50%;
		top: 50%;
		margin-top: 40px;

		&.visible {
			opacity: 1;
			transform: translate(-50% 0px);
		}
	}
</style>

<root>
	<crosshair />
	<thermometer />
	<compass />
	<interactionHint />
	<eventlogger />
	<effects />
	<textinput ghost="..." class="chat-input" @ref=ChatInput onsubmit=@(( PanelEvent panelEvent ) => {
		if ( panelEvent.Target is not TextInput input )
			return;

		if ( input.Text != "" )
			Player.SendMessage( input.Text );

		input.Text = "";
		input.SetClass( "visible", false );
	}) />
	<containerpanel enabled=false />
	<panel class="wip">
		This gamemode is still a work in progress.
	</panel>
	<container />
	<intro />
	<achievementtoaster />
</root>

@code {
	public static HUD Instance { get; private set; }
	public TextInput ChatInput { get; private set; }

	public HUD()
	{
		Instance?.Delete( true );
		Instance = this;
	}

	public override void Tick()
	{
		if ( ChatInput == null )
			return;

		if ( Input.Pressed( "chat" ) )
		{
			ChatInput.Focus();
			ChatInput.SetClass( "visible", true );
		}
	}

	[Event.Hotload]
	private static void Refresh()
	{
		if ( Game.IsClient )
			_ = new HUD();
	}
}
