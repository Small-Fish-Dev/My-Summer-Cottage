@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits Panel

<style>
    InteractionHint {
        position: absolute;
        font-weight: bold;
        flex-direction: column;
        border-radius: 10px;
        opacity: 0;
        transform: scale(0);
        transform-origin: left top;
        transition: transform 0.5s ease-in-out;

        .title {
            font-size: 24px;
            padding-bottom: 5px;
            color: orange;
        }

        .interaction {
            flex-direction: row;
            align-items: center;
            padding-bottom: 5px;
            padding-left: 10px;
            font-size: 18px;

            .icon {
                width: 22px; 
                aspect-ratio: 1;
                margin-right: 2px;
            }
        }

        &.visible {
            opacity: 1;
            transform: scale(1) translate(-50% -50%);
        }
    }
</style>

@if ( Game.LocalPawn is Player pawn )
{
    var valid = pawn.Interactable is ModelEntity entity;
    <root class="@(valid ? "visible" : "")">
        @if (valid)
        {
            <label class="title" style="color:@(pawn.Interactable.DisplayColor.ToString( true, false ))">@pawn.Interactable.DisplayTitle</label>

            foreach ( var interaction in pawn.Interactions )
            {
                <panel class="interaction">
                    <inputglyph class="icon" glyphSize=@InputGlyphSize.Small button=@interaction.Key />
                    <label>@interaction.Value.Result</label>
                </panel>
            }
        }
    </root>
}

@code {
    private Vector2 lerpPosition;

    public override void Tick()
    {
        if ( Game.LocalPawn is not Player pawn )
            return;

        if ( !HasClass( "visible" ) || pawn.Interactable is not ModelEntity entity || !entity.IsValid ) 
            return;

        var position = entity.Position + (pawn.Interactable.Offset ?? entity.CollisionWorldSpaceCenter - entity.Position);
        lerpPosition = Vector2.Lerp( lerpPosition, position.ToScreen().Clamp( -0.5f, 1.5f ), 10f * Time.Delta );

        Style.Left = Length.Fraction( MathF.Floor( lerpPosition.x * 200f + 0.5f ) / 200f );
        Style.Top = Length.Fraction( MathF.Floor( lerpPosition.y * 200f + 0.5f ) / 200f );
    }

    protected override int BuildHash()
    {
        var pawn = Game.LocalPawn as Player;
        var interactions = String.Join( ',', pawn.Interactions.Select( i => $"{i.Key} {i.Value.Result}" ) );

        return HashCode.Combine( pawn.Interactable?.DisplayTitle, interactions );
    }
}