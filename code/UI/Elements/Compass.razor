@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits Panel

<style>
	Compass {
		position: absolute;
		width: 100%;
		top: 10px;
		justify-content: center;
		opacity: 0.75;

		.container {
			width: @(containerWidth)px;
			height: 80px;
			justify-content: center;
			align-items: center;
			overflow: hidden;

			.background {
				position: absolute;
				left: 0px;
				top: 25px;
				width: 100%;
				height: 30px;
				background-size: @(textureWidth)px 100%;
				background-repeat: repeat-x;
				background-image: url(ui/compass.png);
				image-rendering: point;
			}

			.center {
				width: 30px;
				height: 60px;
				background-image: url(ui/compass_center.png);
				background-size: 100%;
				background-repeat: no-repeat;
				image-rendering: point;
				bottom: 8px;
			}

			.marker {
				position: absolute;
				width: 15px;
				height: 15px;
				border-radius: 50%;
				background-color: white;
				transform: translate(-50% 50%);
			}

			.name {
				position: absolute;
				top: -15px;
				opacity: 0;
				font-size: 16px;
				transform: scale(0);
				transition: transform 0.25s ease-in-out;
				transform-origin: center;

				&.visible {
					opacity: 2;
					transform: translate(-50% -50%) scale(1);
				}
			}
		}
	}
</style>

<root>
	<panel class="container">	
		<panel class="center" />
		
		@{
			if ( Game.LocalPawn is not Player pawn )
				return;

			var yaw = pawn.ViewAngles.yaw;
			var width = textureWidth * ScaleToScreen;

			<panel 
				class="background"
		   		style="background-position-x: @(-width + width * (yaw + 180f) / 360f)px"
				@ref=background >
			</panel>
		}
	</panel>
</root>

@code {
	private float containerWidth => 600f;
	private float textureWidth => 2400f;

	private struct MarkerPanel
	{
		public Panel Panel;
		public Label Label;
		public Marker Marker;
	}

	private Panel background;
	private MarkerPanel[] markers { get; set; }

	protected override void OnAfterTreeRender(bool firstTime)
	{
		base.OnAfterTreeRender( firstTime );

		if ( firstTime )
			markers = Marker.All.Select( marker =>
			{
				var color = marker.Color.ToString( true, false );
				var panel = background.AddChild<Panel>( "marker" );
				panel.Style.BackgroundColor = color;

				var label = background.AddChild<Label>( "name" );
				label.Style.FontColor = color;
				label.Text = marker.Name;

				return new MarkerPanel
				{
					Panel = panel,
					Label = label,
					Marker = marker,
				};
			} ).ToArray();

		if ( Game.LocalPawn is not Player pawn )
			return;

		var yaw = pawn.ViewAngles.yaw;
		var center = containerWidth / 2f;

		foreach ( var markerPanel in markers )
		{
			var panel = markerPanel.Panel;
			var label = markerPanel.Label;
			var marker = markerPanel.Marker;

			var diff = Rotation.LookAt( marker.Position - pawn.Position ).Yaw();
			var angle = (yaw - diff) / 45f;
			var dirtyLen = center + angle * center;
			var len = dirtyLen > 0
				? dirtyLen % textureWidth
				: dirtyLen + textureWidth;

			panel.Style.Left = len;

			label.Style.Left = len;
			label.SetClass( "visible", len <= center + 40f && len >= center - 40f );
		}
	}

	protected override int BuildHash()
	{
		var pawn = Game.LocalPawn as Player;
		return HashCode.Combine( pawn?.ViewAngles.yaw, pawn?.Position );
	}
}