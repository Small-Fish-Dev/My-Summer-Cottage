@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits Panel

<style>
	Eventlogger {
		position: absolute;
		top: 25px;
		left: 25px;
		justify-content: flex-start;
		flex-direction: column;
		align-items: flex-start;

		.container {
			flex-direction: row;
			flex-wrap: wrap;
			text-align: left;
			transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
			transform: translateX(0px);
			max-width: 600px;

			background-color: rgba(black, 0.75);
			padding: 5px;

			&:intro {
				opacity: 0;
				transform: translateX(-100%);
			}

			&:outro {
				opacity: 0;
				transform: translateX(-100%);
			}

			.label {
				font-size: 16px;
				color: white;
			}
		}
	}
</style>


<root />

@code {
	/// <summary>
	/// The limit of events shown at once.
	/// </summary>
	public const int Limit = 5;

	/// <summary>
	/// The type of a log component.
	/// </summary>
	public enum Type
	{
		Label,
		Image
	}

	/// <summary>
	/// Holds basic information of a single log component.
	/// </summary>
	public struct Component
	{
		public string Content { get; set; }
		public Type Type { get; set; }
		public Color Color { get; set; }

		public Component( string content, Type type = Type.Label, Color? color = null )
		{
			Content = content;
			Type = type;
			Color = color ?? Color.White;
		}
	}

	public static Eventlogger Instance { get; private set; }
	private List<Panel> events = new();

	public Eventlogger()
	{
		Instance = this;
	}

	/// <summary>
	/// Create a log on clientside.
	/// </summary>
	/// <param name="time"></param>
	/// <param name="components"></param>
	public void Log( float time, params Component[] components )
	{
		// Handle overflowing.
		if ( events.Count >= Limit )
		{
			var first = events.FirstOrDefault();
			first?.Delete();
			events.Remove( first );
		}

		// Create eventlog.
		var container = Instance.AddChild<Panel>( "container" );

		// Create components.
		foreach ( var component in components )
		{
			switch ( component.Type )
			{
				case Type.Label:
					var label = container.AddChild<Label>( "label" );
					label.Text = component.Content;
					label.Style.FontColor = component.Color;
					container.AddChild( label );

					break;

				case Type.Image:
					break;
			}
		}

		events.Add( container );

		// Delete the eventlog.
		GameTask.RunInThreadAsync( async () =>
		{
			await GameTask.DelaySeconds( time );
			container?.Delete();
		} );
	}

	private static void send( To target, float time, params Component[] components )
	{
		if ( Game.IsClient )
			return;

		// Let us write to a MemoryStream.
		using var stream = new MemoryStream();
		using var writer = new BinaryWriter( stream );

		// Write the "header".
		writer.Write( time );
		writer.Write( components.Length );

		// Write all components.
		foreach ( var component in components )
		{
			writer.Write( component.Content );
			writer.Write( (int)component.Type );
			writer.Write( component.Color.ToString() );
		}

		// Send to clients.
		Player._sendEventlog( target, stream.ToArray() );
	}

	/// <summary>
	/// Send an eventlog to a To target.
	/// </summary>
	/// <param name="target"></param>
	/// <param name="components"></param>
	public static void Send( To target, params Component[] components )
		=> send( target, 5f, components );

	/// <summary>
	/// Send an eventlog to a To target.
	/// </summary>
	/// <param name="target"></param>
	/// <param name="time"></param>
	/// <param name="components"></param>
	public static void Send( To target, float time, params Component[] components )
		=> send(target, time, components);

	/// <summary>
	/// Decodes an eventlog from a BinaryReader.
	/// </summary>
	/// <param name="reader"></param>
	/// <returns></returns>
	public static void FromBytes( byte[] data )
	{
		// Make a BinaryReader for the byte array.
		using var stream = new MemoryStream( data );
		using var reader = new BinaryReader( stream );

		// Read header.
		var time = reader.ReadSingle();
		var count = reader.ReadInt32();

		// Read components.
		var components = new Component[count];
		for ( int i = 0; i < count; i++ )
		{
			var content = reader.ReadString();
			var type = (Type)reader.ReadInt32();
			var color = Color.Parse( reader.ReadString() );
			
			components[i] = new( content, type, color );
		}

		// Create eventlog.
		Instance?.Log( time, components );
	}
}