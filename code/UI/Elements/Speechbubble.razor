@using Sandbox;
@using Sandbox.UI;

@namespace Sauna
@inherits WorldPanel

<style>
	Speechbubble {
		position: absolute;
		max-width: 500px;
		min-height: 20px;
		background-color: rgba(white, 0);
		flex-direction: column;
		text-align: left;
		flex-wrap: wrap;
		justify-content: flex-end;

		.border {
			background-color: rgba(white, 0);
			border-image: url(ui/speechbubble.png) fill;

			.label {
				bottom: 20px;
				right: 18px;
				margin-right: -30px;
				margin-bottom: -20px;
				font-size: 32px;
				font-family: Retro-Gaming;
				color: darken(#5E7C34, 0.25);
				text-shadow: 0px 2px 0px darken(#5E7C34, 0.75);
			}
		}
	}
</style>

<root>
	<panel class="border">
		<label class="label">@DisplayedText</label>
	</panel>
</root>

@code {
	public const float Delay = 0.1f;

	public string Text { get; set; }
	public Player From { get; set; }

	public string DisplayedText => Text.Substring( 0, textIndex );
	private int textIndex = 0;
	private TimeUntil nextIndex = Delay;

	Vector2 lerpPosition;

	/// <summary>
	/// Attaches a speech bubble to a player.
	/// </summary>
	/// <param name="text"></param>
	/// <param name="player"></param>
	public Speechbubble( string text, Player player )
	{
		Text = text;
		From = player;

		var size = new Vector2( 1000f, 800f );
		WorldScale = 0.5f;
		PanelBounds = new Rect( -size.x / 4f, -size.y, size.x, size.y );
	}

	public override void Tick()
	{
		if ( From == null || !From.IsValid )
		{
			if ( !IsDeleting )
				Delete();

			return;
		}

		// Character adding.
		if ( textIndex < Text.Length && nextIndex )
		{
			nextIndex = Delay;
			textIndex++;
		}

		// Set position and rotation.
		var targetPosition = From.GetEyePosition() + Vector3.Up * (5f + MathF.Abs( 2f * MathF.Sin( Time.Now ) ));
		Position = Vector3Extensions.Round( targetPosition * 10f ) / 10f;

		var rotation = Rotation.LookAt( Camera.Position - Position );
		var targetRoll = 5f * MathF.Sin( Time.Now * 1.5f );
		Rotation = Rotation.From( 0, rotation.Yaw(), MathF.Floor( targetRoll * 10f + 0.5f ) / 10f );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( textIndex );
	}
}